# SPDX-License-Identifier: GPL-2.0-or-later

# script for apm32f4x family

#
# apm32 devices support SWD and JTAG transport.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME apm32a4x
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 32kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x8000
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
    if { [using_jtag] } {
        # jtag tap id
        set _CPUTAPID 0x4ba00477
    } else {
        # SW-DP tap id
        set _CPUTAPID 0x2ba01477
    }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
    jtag newtap $_CHIPNAME bs -irlen 5
}

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME apm32f4x 0 0 0 0 $_TARGETNAME

flash bank $_CHIPNAME.otp apm32f4x 0x1fff7800 0 0 0 $_TARGETNAME

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 16MHz, so use F_JTAG = 2MHz
adapter speed 2000

adapter srst delay 100
if {[using_jtag]} {
    jtag_ntrst_delay 100
}

reset_config srst_nogate

if {![using_hla]} {
    # if srst is not fitted use SYSRESETREQ to
    # perform a soft reset
    cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -event examine-end {
	# Enable debug during low power modes (uses more power)
	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP
	mmw 0xE0042004 0x00000007 0

	# Stop watchdog counters during halt
	# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
	mmw 0xE0042008 0x00001800 0
}

tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000

lappend _telnet_autocomplete_skip _proc_pre_enable_$_CHIPNAME.tpiu
proc _proc_pre_enable_$_CHIPNAME.tpiu {_chipname} {
	targets $_chipname.cpu

	if { [$_chipname.tpiu cget -protocol] eq "sync" } {
		switch [$_chipname.tpiu cget -port-width] {
			1 {
				# Set TRACE_IOEN; TRACE_MODE to sync 1 bit; GPIOE[2-3] to AF0
				mmw 0xE0042004 0x00000060 0x000000c0
				mmw 0x40021020 0x00000000 0x0000ff00
				mmw 0x40021000 0x000000a0 0x000000f0
				mmw 0x40021008 0x000000f0 0x00000000
			  }
			2 {
				# Set TRACE_IOEN; TRACE_MODE to sync 2 bit; GPIOE[2-4] to AF0
				mmw 0xE0042004 0x000000a0 0x000000c0
				mmw 0x40021020 0x00000000 0x000fff00
				mmw 0x40021000 0x000002a0 0x000003f0
				mmw 0x40021008 0x000003f0 0x00000000
			  }
			4 {
				# Set TRACE_IOEN; TRACE_MODE to sync 4 bit; GPIOE[2-6] to AF0
				mmw 0xE0042004 0x000000e0 0x000000c0
				mmw 0x40021020 0x00000000 0x0fffff00
				mmw 0x40021000 0x00002aa0 0x00003ff0
				mmw 0x40021008 0x00003ff0 0x00000000
			  }
		}
	} else {
		# Set TRACE_IOEN; TRACE_MODE to async
		mmw 0xE0042004 0x00000020 0x000000c0
	}
}

$_CHIPNAME.tpiu configure -event pre-enable "_proc_pre_enable_$_CHIPNAME.tpiu $_CHIPNAME"

$_TARGETNAME configure -event reset-init {
	# Configure PLL to boost clock to HSI x 4 (64 MHz)
	mww 0x40023804 0x08012008   ;# RCC_PLLCFGR 16 Mhz /8 (M) * 128 (N) /4(P)
	mww 0x40023C00 0x00000102   ;# FLASH_ACR = PRFTBE | 2(Latency)
	mmw 0x40023800 0x01000000 0 ;# RCC_CR |= PLLON
	sleep 10                    ;# Wait for PLL to lock
	mmw 0x40023808 0x00001000 0 ;# RCC_CFGR |= RCC_CFGR_PPRE1_DIV2
	mmw 0x40023808 0x00000002 0 ;# RCC_CFGR |= RCC_CFGR_SW_PLL

	# Boost JTAG frequency
	adapter speed 8000
}

$_TARGETNAME configure -event reset-start {
	# Reduce speed since CPU speed will slow down to 16MHz with the reset
	adapter speed 2000
}
